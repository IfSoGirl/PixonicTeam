/*
 * File: app/view/EmployeesNav.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('PixonicTeam.view.EmployeesNav', {
    extend: 'Ext.navigation.View',

    requires: [
        'Ext.navigation.Bar',
        'Ext.Button',
        'Ext.field.Search',
        'Ext.dataview.List',
        'Ext.XTemplate'
    ],

    config: {
        id: 'employeeNav',
        autoDestroy: false,
        defaultBackButtonText: 'Назад',
        navigationBar: {
            cls: 'toolbar',
            docked: 'top',
            id: 'navBar',
            itemId: 'navBar',
            ui: 'light',
            layout: {
                type: 'hbox',
                align: 'end'
            },
            items: [
                {
                    xtype: 'button',
                    action: 'menuButtonPressed',
                    id: 'menuBtnNav',
                    itemId: 'menuBtnNav',
                    text: 'Меню'
                }
            ]
        },
        items: [
            {
                xtype: 'container',
                title: 'Сотрудники',
                id: 'searchContainer',
                layout: 'vbox',
                items: [
                    {
                        xtype: 'searchfield',
                        cls: 'search-label',
                        height: '40px',
                        id: 'employeeSearch',
                        itemId: 'employeeSearch',
                        placeHolder: 'ПОИСК'
                    },
                    {
                        xtype: 'container',
                        height: '35px',
                        id: 'labelsContainer',
                        layout: {
                            type: 'hbox',
                            align: 'stretchmax'
                        },
                        items: [
                            {
                                xtype: 'button',
                                handler: function(button, e) {
                                    button.setLabelCls('alphabet-underline');
                                    var officeBtn = Ext.getCmp('officeButton');
                                    officeBtn.setLabelCls('alphabet-label');
                                },
                                cls: 'transparent',
                                id: 'alphabetButton',
                                labelCls: 'alphabet-underline',
                                text: 'ПО АЛФАВИТУ'
                            },
                            {
                                xtype: 'button',
                                handler: function(button, e) {
                                    button.setLabelCls('alphabet-underline');
                                    var alphabetBtn = Ext.getCmp('alphabetButton');
                                    alphabetBtn.setLabelCls('alphabet-label');
                                },
                                cls: 'transparent',
                                docked: 'right',
                                id: 'officeButton',
                                labelCls: 'alphabet-label',
                                text: 'ПО ОФИСАМ'
                            }
                        ]
                    },
                    {
                        xtype: 'list',
                        flex: 1,
                        cls: 'tpl-ylovd7t6',
                        id: 'employeeList',
                        itemId: 'mylist1',
                        itemTpl: [
                            '<div style = "height:80px;"> ',
                            '    <div style = "float:left; margin-right: 10px;">',
                            '      <img src = {photo}; style="height:80px; width: 80px" />    ',
                            '    </div>',
                            '    <h3 class="list-item-header">{name}</h3>',
                            '    <span class="post">{post}</span><br>',
                            '    <span style = "font-size: 16px"> Тел. <span class = "phone-url" style="color: blue" > {phone} </span></span><br>',
                            '    <span style = "font-size: 16px"> Skype <span class = "skype-url" style="color: blue"> {skype}</span> </span>',
                            '</div>'
                        ],
                        pressedCls: 'list-item-pressed',
                        selectedCls: 'list-item-selected',
                        store: 'EmployeeStore',
                        grouped: true,
                        itemHeight: 80,
                        striped: true
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMynavigationbarBack',
                event: 'back',
                delegate: '#navBar'
            },
            {
                fn: 'onSearchfieldKeyup',
                event: 'keyup',
                delegate: '#employeeSearch'
            },
            {
                fn: 'onEmployeeSearchClearicontap',
                event: 'clearicontap',
                delegate: '#employeeSearch'
            },
            {
                fn: 'onListItemTap',
                event: 'itemtap',
                delegate: '#employeeList'
            }
        ]
    },

    onMynavigationbarBack: function(bar, eOpts) {
            setTimeout(function() {
                var menuBtn = Ext.getCmp('menuBtnNav');
                menuBtn.show();},
             350);
    },

    onSearchfieldKeyup: function(textfield, e, eOpts) {
            var searchString = textfield.getValue().toLowerCase();
            var store = Ext.getStore('EmployeeStore');
            store.clearFilter();
            if(searchString){
                store.filterBy(function(record) {
                    var name =  record.get('name').toLowerCase();
                    return (name.indexOf(searchString)  >= 0);
                });
            }
    },

    onEmployeeSearchClearicontap: function(textfield, e, eOpts) {
                Ext.getStore('EmployeeStore').clearFilter();
    },

    onListItemTap: function(dataview, index, target, record, e, eOpts) {
            e.stopEvent();
            if (e.target.className == 'phone-url') {
                mainController.openUrl("tel:" +mainController.parsePhoneForCall(record.data.phone),true);
                return;
            }

            if (e.target.className == 'skype-url') {
                mainController.openUrl("skype:"+record.data.skype+"?call",true);
                return;
            }

            var menuBtn = Ext.getCmp('menuBtnNav');
            menuBtn.hide();
            setTimeout(function(){dataview.deselect(index);},500);


            var panel = Ext.getCmp('colleaguePanel');
            panel.setInfo(record);
            this.push(panel);


    }

});